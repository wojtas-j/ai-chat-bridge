services:
  db:                                    # Database service
    image: postgres:17.6-alpine          # Postgres image
    container_name: postgres_db          # Container name
    restart: unless-stopped              # Restart unless manually stopped
    environment:
        POSTGRES_DB_HOST: $POSTGRES_DB_HOST
        POSTGRES_DB_PORT: $POSTHRES_DB_PORT
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    ports:
      - "5432:5432"                      # Map host port to container port
    volumes:
      - db_data:/var/lib/postgresql/data # Persist database data
    healthcheck:                         # Check database readiness
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"] # Verify DB connection
      interval: 10s                      # Check every 10 seconds
      timeout: 5s                        # Timeout after 5 seconds
      retries: 5                         # Retry 5 times
      start_period: 10s                  # Wait 10s before checks
    deploy:
      resources:                         # Limit container resources
        limits:
          cpus: "0.50"                   # Max 50% CPU
          memory: 1024M                  # Max 1GB RAM
        reservations:
          cpus: "0.25"                   # Reserve 25% CPU
          memory: 256M                   # Reserve 256MB RAM
    networks:
      - app-network                     # Use custom network

  backend:                              # Backend service
    build:
      context: ./backend                 # Build from backend directory
      dockerfile: Dockerfile             # Use backend Dockerfile
    container_name: aichatbridge-backend # Container name
    restart: unless-stopped              # Restart unless manually stopped
    environment:
        SPRING_PROFILES_ACTIVE: prod       # Use application-prod.yaml locally
        POSTGRES_DB_HOST: db
        POSTGRES_DB_PORT: $POSTHRES_DB_PORT
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        DISCORD_BOT_TOKEN: $DISCORD_BOT_TOKEN
        OPENAI_API_KEY_FOR_DISCORD: $OPENAI_API_KEY_FOR_DISCORD
        OPEN_AI_MODEL_FOR_DISCORD: gpt-4o-mini
        MAX_TOKENS_OPEN_AI_FOR_DISCORD: 500
        JWT_SECRET: $JWT_SECRET
        JWT_EXPIRATION_MS: 1800000
        JWT_REFRESH_EXPIRATION_DAYS: 7
        ENCRYPTION_KEY: $ENCRYPTION_KEY
        SALT: $SALT
    ports:
      - "8080:8080"                      # Map host port to container port
    depends_on:
      db:
        condition: service_healthy       # Wait for database to be healthy
    healthcheck:                         # Check backend readiness
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"] # Verify health endpoint
      interval: 30s                      # Check every 30 seconds
      timeout: 5s                        # Timeout after 5 seconds
      retries: 3                         # Retry 3 times
      start_period: 30s                  # Wait 30s before checks
    deploy:
      resources:                         # Limit container resources
        limits:
          cpus: "1.0"                    # Max 1 CPU
          memory: 2048M                  # Max 2GB RAM
        reservations:
          cpus: "0.5"                    # Reserve 50% CPU
          memory: 512M                   # Reserve 512MB RAM
    networks:
      - app-network                     # Use custom network

  frontend:                             # Frontend service
    build:
      context: ./frontend                # Build from frontend directory
      dockerfile: Dockerfile             # Use frontend Dockerfile
    container_name: aichatbridge-frontend # Container name
    restart: unless-stopped              # Restart unless manually stopped
    ports:
      - "3000:80"                        # Map host port 3000 to nginx port 80
    depends_on:
      backend:
        condition: service_healthy       # Wait for backend to be healthy
    healthcheck:                         # Check frontend readiness
      test: ["CMD", "curl", "-f", "http://localhost"] # Verify nginx response
      interval: 30s                      # Check every 30 seconds
      timeout: 5s                        # Timeout after 5 seconds
      retries: 3                         # Retry 3 times
      start_period: 5s                   # Wait 5s before checks
    deploy:
      resources:                         # Limit container resources
        limits:
          cpus: "0.5"                    # Max 50% CPU
          memory: 512M                   # Max 512MB RAM
        reservations:
          cpus: "0.25"                   # Reserve 25% CPU
          memory: 256M                   # Reserve 256MB RAM
    networks:
      - app-network                     # Use custom network

networks:
  app-network:                         # Custom network for services
    driver: bridge                     # Bridge network driver

volumes:
  db_data:                             # Named volume for database data
